<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liangxin.qlmall_admin.sytem.mapper.RoleMapper">
  <resultMap id="BaseResultMap" type="com.liangxin.qlmall_admin.sytem.pojo.Role">
    <id column="role_id" jdbcType="INTEGER" property="roleId" />
    <result column="role_name" jdbcType="VARCHAR" property="roleName" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from admin_role
    where role_id = #{roleId,jdbcType=INTEGER}
  </delete>

    <delete id="delete" parameterType="java.util.List">
        delete from admin_role
        where
        <foreach collection="list" item="roleIds" open="role_id in (" close=")" separator=",">
            #{roleIds}
        </foreach>
  </delete>
  <insert id="insert" parameterType="com.liangxin.qlmall_admin.sytem.pojo.Role" useGeneratedKeys="true" keyColumn="role_id" keyProperty="roleId">
    insert into admin_role (role_id, role_name, remark, 
      create_time, update_time)
    values (#{roleId,jdbcType=INTEGER}, #{roleName,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.liangxin.qlmall_admin.sytem.pojo.Role">
    update admin_role
    set role_name = #{roleName,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where role_id = #{roleId,jdbcType=INTEGER}
  </update>

    <update id="updateById" parameterType="com.liangxin.qlmall_admin.sytem.pojo.Role">
    update admin_role
    set  update_time = #{updateTime,jdbcType=TIMESTAMP},
    role_name=#{roleName},
    remark=#{remark}
    where role_id = #{roleId,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select role_id, role_name, remark, create_time, update_time
    from admin_role
    where role_id = #{roleId,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
      SELECT
          r.role_id ,
          r.role_name ,
          r.remark,
          r.create_time ,
          r.update_time ,
          GROUP_CONCAT( rm.menu_id ) menuIds
      FROM
          admin_role r
      LEFT JOIN admin_role_menu rm ON ( r.role_id = rm.role_id )
      WHERE 1 = 1
      <if test="username != null and username != ''">
          AND r.role_name like CONCAT('%',#{username},'%')
      </if>
          GROUP BY
          r.role_id
  </select>

  <select id="selectAllRols" resultMap="BaseResultMap">
    select role_id, role_name, remark, create_time, update_time
    from admin_role
  </select>

  <select id="findUserRole" resultMap="BaseResultMap">
        SELECT
            r.*
        FROM
            admin_role r
        LEFT JOIN admin_user_role ur ON (r.role_id = ur.role_id)
        LEFT JOIN admin_user u ON (u.user_id = ur.user_id)
        WHERE
            u.username = #{username}
    </select>
</mapper>